<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="beta.function.account.dao.AccountDAO">

    <resultMap id="authenticatedUser" type="beta.function.account.dto.AccountDTO">
        <id property="userCode" column="userCode"/>
        <result property="username" column="username"/>
        <result property="password" column="password"/>
        <result property="fullName" column="fullName"/>
        <result property="userRole" column="authorityCodeName"/>
        <result property="birthday" column="birthday"/>
        <result property="email"    column="email"/>
        <result property="phone" column="phone"/>
        <result property="suspension" column="suspension"/>
        <result property="deletion" column="deletion"/>
        <result property="profileimg" column="profileimg"/>
        <result property="authorityCode" column="authorityCode"/>
    </resultMap>

    <resultMap id="authorityResultMap" type="beta.function.account.dto.AuthorityDTO">
        <id property="authorityCode" column="authorityCode"/>
        <result property="authorityCodeName" column="authorityCodeName"/>
    </resultMap>

    <select id="findByUsername" resultMap="authenticatedUser">
        SELECT
            a.userCode,
            a.username,
            a.password,
            b.authorityCodeName
        FROM
            account_list a
        join
            account_authority b  on a.authorityCode = b.authorityCode
        WHERE
            a.username = #{ username }
    </select>

    <insert id="regist" parameterType="beta.function.account.dto.SignupDTO" >
    INSERT INTO account_list
    (
        username,
        password,
        fullName,
        nickName,
        birthday,
        email,
        phone,
        profileimg,
        authorityCode
    )
    VALUES
    (
        #{ username },
        #{ password },
        #{ fullName },
        #{ nickName },
        #{ birthday },
        #{ email },
        #{ phone },
        #{ profileimg },
        (
            SELECT
                authorityCode
            FROM
                account_authority
            WHERE
                authoritycodename = 'USER'
        )
    )
    </insert>

    <select id="lostId" resultMap="authenticatedUser">
        SELECT
        a.username
        FROM
        account_list a
        WHERE
        a.email = #{ email }
    </select>

    <update id="changepwd" parameterType="beta.function.account.dto.AccountDTO">
        update
        account_list
        set password = #{ password }
        where username = #{ username };
    </update>


    <select id="checkId" parameterType="beta.function.account.dto.SignupDTO">
        SELECT
        count(username)
        FROM
        account_list
        WHERE
        username = #{ username }
    </select>

    <select id="findAllMember" resultMap="authenticatedUser">
        SELECT
            userCode,
            username,
            fullname,
            nickName,
            password,
            birthday,
            email,
            phone,
            suspension,
            deletion,
            profileimg,
            authorityCode
        FROM
            account_list
        ORDER BY
            userCode
    </select>

    <select id="findAllAuthority" resultMap="authorityResultMap">
        SELECT
            authorityCode,
            authorityCodeName
        FROM
            account_authority
    </select>

    <select id="findMemberByCode" parameterType="int" resultMap="authenticatedUser">
        SELECT
            userCode,
        username,
        fullname,
            nickName,
        password,
            birthday,
            email,
            phone,
            suspension,
            deletion,
            profileimg,
            authorityCode
        FROM
            account_list
        WHERE
            userCode = #{userCode}
    </select>

    <insert id="registNewMember" parameterType="beta.function.account.dto.AccountDTO"
            useGeneratedKeys="true" keyProperty="userCode">
        INSERT INTO
            account_list
            (
            username,
            fullname,
            nickName,
            password,
            birthday,
            email,
            phone,
            suspension,
            deletion,
            profileimg,
            authorityCode
            )
        VALUES
            (
            #{username},
            #{fullname},
            #{nickName},
            #{password},
            #{birthday},
            #{email},
            #{phone},
            #{suspension},
            #{deletion},
            #{profileimg},
            #{authorityCode}
            )
    </insert>

    <update id="updateMember" parameterType="beta.function.account.dto.AccountDTO">
        UPDATE account_list
        SET
            username = #{username},
            fullname = #{fullname},
            nickName = #{nickName},
            password = #{password},
            birthday = #{birthday},
            email = #{email},
            phone = #{phone},
            suspension = #{suspension},
            deletion = #{deletion},
            profileimg = #{profileimg},
            authorityCode = #{authorityCode}
        WHERE
            userCode = #{userCode}
    </update>

    <delete id="deleteMember" parameterType="int">
        DELETE
        FROM
            account_list
        WHERE
            userCode = #{userCode}
    </delete>

    <!--회원코드별 회원정보-->
    <select id="userAllList" resultMap="authenticatedUser">
        SELECT
        userCode,
        username,
        fullname,
        nickName,
        password,
        birthday,
        email,
        phone,
        suspension,
        deletion,
        profileimg,
        authorityCode
        FROM
        account_list
        ORDER BY
        userCode
    </select>

</mapper>